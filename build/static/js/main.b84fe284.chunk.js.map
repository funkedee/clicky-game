{"version":3,"sources":["components/Header/index.js","components/Directions/index.js","components/ImageCard/index.js","components/Row/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","result","score","topScore","Directions","ImageCard","onClick","handleClick","id","src","image","alt","Row","children","App","state","images","isClicked","shuffledArray","splitArray1","splitArray2","splitArray3","shuffleArray","array","i","length","j","Math","floor","random","temp","_this","splitArray","slice","makeImageCards","map","components_ImageCard","key","tempArray","includes","lose","push","setState","console","log","win","this","components_Header","components_Directions","components_Row","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b84fe284.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className = \"header\">\r\n            <div className = \"title\"><h3>Clicky Game</h3></div>\r\n            <div className = \"result text-center\"><p>{props.result}</p></div>\r\n            <div className = \"scoreboard\">\r\n                <p>Score: {props.score} | Top Score: {props.topScore}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Directions(props) {\r\n    return(\r\n        <div className=\"directions text-center\">\r\n            <h1>Adventure Time Clicky Game!</h1>\r\n            <p className=\"directions\">Click an image to earn points, but if you click the same image twice, you lose!</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Directions;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImageCard(props) {\r\n    return ( \r\n        <div className=\"card mx-2\" onClick={() => props.handleClick(props.id)} id={props.id}>\r\n            <img src = {props.image} alt = {props.id} ></img>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCard;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n    return (\r\n        <div className=\"row my-2\">{props.children}</div>\r\n    );\r\n};\r\n\r\nexport default Row","import React, {Component} from 'react';\nimport Header from \"./components/Header\";\nimport Directions from \"./components/Directions\";\nimport ImageCard from \"./components/ImageCard/index\";\nimport Row from \"./components/Row\"\nimport images from \"./images.json\"\nimport './App.css';\nimport { lookupService } from 'dns';\n\nclass App extends Component {\n\tstate = {\n\t\timages: images,\n\t\tscore: 0,\n\t\ttopScore: 0,\n\t\tresult: \"Click an image to start\",\n\t\tisClicked: []\n\t}\n\n\tshuffledArray = [];\n\tsplitArray1 = [];\n\tsplitArray2 = [];\n\tsplitArray3 = [];\n\n\tshuffleArray = array => {\n\t\tfor (var i = array.length - 1; i > 0; i--) {\n\t\t\tvar j = Math.floor(Math.random() * (i + 1));\n\t\t\tvar temp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t};\n\t\tthis.shuffledArray = array\n\t};\n\n\tsplitArray = array => {\n\t\tthis.splitArray1 = array.slice(0,4);\n\t\tthis.splitArray2 = array.slice(4,8);\n\t\tthis.splitArray3 = array.slice(8,12);\n\t};\n\n\tmakeImageCards = array => {\n\t\treturn array.map(image => <ImageCard image={image.image} id={image.id} key={image.id} handleClick={this.handleClick}/>)\n\t};\n\n\thandleClick = (id) => {\n\t\tlet tempArray = this.state.isClicked;\n\t\tif (this.state.isClicked.includes(id)) return this.lose();\n\t\ttempArray.push(id);\n\t\tthis.setState({isClicked: tempArray});\n\t\tthis.setState({\n\t\t\tscore: this.state.score + 1,\n\t\t\tresult: \"You guessed correct!\"\n\t\t});\n\t\tif(this.state.score >= this.state.topScore){\n\t\t\tthis.setState({topScore: this.state.score});\n\t\t\tconsole.log(this.state.topScore);\n\t\t\tconsole.log(this.state)\n\t\t};\n\t\tconsole.log(this.state.topScore);\n\t\tif(this.state.score === 12) return this.win();\n\t};\n\n\tlose = () => {\n\t\tthis.setState({\n\t\t\tisClicked: [],\n\t\t\tresult: \"You lose! Guess again to restart\",\n\t\t\tscore: 0\n\t\t})\n\t};\n\n\twin = () => {\n\t\tthis.setState({\n\t\t\tisClicked: [],\n\t\t\tresult: \"Congratulations, you win! Guess again to restart\",\n\t\t\tscore: 0\n\t\t})\n\t}\n\n\trender() {\n\t\tthis.shuffleArray(this.state.images);\n\t\tthis.splitArray(this.shuffledArray);\n\t\treturn ( \n\t\t\t<div>\n\t\t\t\t<Header result= {this.state.result} score={this.state.score} topScore={this.state.topScore}></Header>\n\t\t\t\t<Directions></Directions>\n\t\t\t\t<div className=\"container mx-auto\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{this.makeImageCards(this.splitArray1)}\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{this.makeImageCards(this.splitArray2)}\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{this.makeImageCards(this.splitArray3)}\n\t\t\t\t\t</Row>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}